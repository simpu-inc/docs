{
  "openapi": "3.0.1",
  "info": {
    "title": "OpenAPI Simpu API",
    "description": "Simpu API Documentation",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.v1.simpu.co"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "paths": {
    "/sms/send": {
      "post": {
        "description": "Send an SMS message",
        "requestBody": {
          "description": "SMS message object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendSMSRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "SMS response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SMS"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/email/send": {
      "post": {
        "description": "Send an Email",
        "requestBody": {
          "description": "Email object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailSendRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Email response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Email"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/lookup/phone": {
      "post": {
        "description": "Lookup a Phone",
        "requestBody": {
          "description": "Lookup phone object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LookupPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Lookup phone response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupPhone"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/airtime/buy": {
      "post": {
        "description": "Buy airtime",
        "requestBody": {
          "description": "Buy airtime object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyAirtimeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Buy airtime response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuyAirtime"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/lists/contact/rows/query": {
      "post": {
        "description": "Query contact rows",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "Number of rows to retrieve per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number for paginated results.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "query_id",
            "in": "query",
            "description": "The scroll query ID for paginated results.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "requestBody": {
          "description": "Query contact rows object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RowsQueryRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response containing table, row data, and metadata",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Row"
                      }
                    },
                    "table": {
                      "$ref": "#/components/schemas/Table"
                    },
                    "smartlist": {
                      "$ref": "#/components/schemas/SmartList"
                    },
                    "meta": {
                      "$ref": "#/components/schemas/MetaQueryRows"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
       "/lists/contact/rows": {
      "post": {
        "description": "Create a new contact row",
        "requestBody": {
          "description": "This creates a new row in the specified contact table",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRowRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Row created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "row": {
                      "$ref": "#/components/schemas/Row"
                    },
                    "table": {
                      "$ref": "#/components/schemas/Table"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/otp/{id}": {
      "get": {
        "description": "Retrieve a single OTP based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of OTP to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTP"
                }
              }
            }
          },
          "404": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Revoke a single OTP based on the ID supplied",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of OTP to revoke",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OTP revoked",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/otp/request_token": {
      "post": {
        "description": "Request an OTP token",
        "requestBody": {
          "description": "OTP request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OTP response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTP"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/otp/verify": {
      "post": {
        "description": "Verify an OTP token",
        "requestBody": {
          "description": "OTP verify request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OTPVerifyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OTP response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OTP"
                }
              }
            }
          },
          "404": {
            "description": "Token not found or expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/otp/get_by_recipient": {
      "get": {
        "description": "Retrieve all OTPs based on the recipient supplied",
        "parameters": [
          {
            "name": "recipient",
            "in": "path",
            "description": "Recipient of OTPs to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OTP"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SMS": {
        "required": [
          "id",
          "recipients",
          "is_trackable",
          "sender_id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique ID of the SMS message",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "recipients": {
            "description": "Recipients of the SMS message",
            "type": "array",
            "example": [
              "2348023456789"
            ]
          },
          "sender_id": {
            "description": "Sender ID of the SMS message",
            "type": "string",
            "example": "Simpu",
            "maxLength": 11
          },
          "is_trackable": {
            "description": "This determines if links in the message should be tracked",
            "type": "boolean",
            "example": false
          },
          "content": {
            "description": "Content of the SMS message",
            "type": "string",
            "example": "Hello! World. This is a test message."
          },
          "external_ref": {
            "description": "This is a reference to the message in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the message",
            "type": "string",
            "example": "https://example.com/sms/delivery_report"
          },
          "template_id": {
            "description": "Template ID of the SMS message",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "personalisation": {
            "description": "Personalisation of the SMS message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Personalisation"
            }
          },
          "created_datetime": {
            "description": "Date and time the SMS was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the SMS token was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaSMS"
          }
        }
      },
      "Email": {
        "required": [
          "id",
          "sender_id",
          "recipients"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique ID of the Email ",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "recipients": {
            "description": "Recipients of the Email",
            "type": "array",
            "example": [
              "mack@acme.com"
            ]
          },
          "sender_id": {
            "description": "Sender ID of the Email",
            "type": "string",
            "example": "john@acme.com"
          },
          "external_ref": {
            "description": "This is a reference to the email in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the message",
            "type": "string",
            "example": "https://example.com/email/delivery_report"
          },
          "template_id": {
            "description": "Template ID of the Email message",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "from_name": {
            "description": "The sender of the email.",
            "type": "string",
            "example": "John from Acme"
          },
          "personalisation": {
            "description": "Personalisation of the Email message",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisationEmail"
            }
          },
          "created_datetime": {
            "description": "Date and time the Email was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the Email  was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaEmail"
          }
        }
      },
      "BuyAirtime": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Unique ID of the SMS message",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "recipient": {
            "description": "The recipient of the airtime",
            "type": "string",
            "example": "2348023456789"
          },
          "external_ref": {
            "description": "This is a reference to the airtime in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the message",
            "type": "string",
            "example": "https://example.com/airtime/delivery_report"
          },
          "status": {
            "description": "The status of the airtime ",
            "type": "string",
            "example": "pending",
            "enum": [
              "pending",
              "sent",
              "failed",
              "error",
              "success",
              "duplicate"
            ]
          },
          "created_datetime": {
            "description": "Date and time the airtime was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "network": {
            "description": "The network carrier of the airtime",
            "type": "string",
            "example": "Airtel",
            "enum": [
              "Airtel",
              "MTN",
              "Glo",
              "9mobile",
              "NTEL"
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/MetaAirtime"
          }
        }
      },
      "LookupPhone": {
        "required": [
          "msisdn"
        ],
        "type": "object",
        "properties": {
          "msisdn": {
            "description": "The phone number looked up",
            "type": "string",
            "example": "2348089672786"
          },
          "operator": {
            "description": "The carrier of the phone number",
            "type": "string",
            "example": "MTN"
          },
          "country": {
            "description": "The country of the phone number",
            "type": "string",
            "example": "Nigeria"
          },
          "ported": {
            "description": "The ported status of the phone number",
            "type": "boolean",
            "example": false
          },
          "dnd": {
            "description": "The DND status of the phone number",
            "type": "boolean",
            "example": false
          }
        }
      },
      "Row": {
        "required": [
          "id",
          "columns"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the row ",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "columns": {
            "description": "Data values for each column in the row",
            "type": "object",
            "example": {
              "name": "name",
              "email": "email address",
              "type": "Text"
            }
          },
          "created_datetime": {
            "description": "Date and time the Row was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the Row was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          }
        }
      },
      "RowsFilter": {
        "type": "object",
        "properties": {
          "column_id": {
            "type": "string",
            "example": "fe9bafa8ae434a838a278aa7e710cded"
          },
          "name": {
            "type": "string",
            "example": "full_name"
          },
          "value": {
            "type": "string",
            "example": "John"
          },
          "operator": {
            "type": "string",
            "example": "contain",
            "enum": [
              "equal",
              "not_equal",
              "empty",
              "not_empty",
              "contain",
              "not_contain",
              "is_any",
              "is_none_of"
            ]
          }
        }
      },
      "Table": {
        "required": [
          "id",
          "columns"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the Table",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "columns": {
            "description": "List of column names in the table",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "name",
              "email"
            ]
          },
          "created_datetime": {
            "description": "Date and time the table was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the table was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          }
        }
      },
      "SmartList": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Smartlist ID ",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "created_datetime": {
            "description": "Date and time the smartlist was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the smartlist was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          }
        }
      },
      "OTP": {
        "required": [
          "id",
          "recipient",
          "status",
          "status_desc",
          "created_datetime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the OTP token",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "recipient": {
            "description": "Recipient of the OTP token",
            "type": "string",
            "example": "2348023456789"
          },
          "status": {
            "description": "Status of the OTP token",
            "type": "number",
            "example": 1
          },
          "status_desc": {
            "description": "Description of the status of the OTP token",
            "type": "string",
            "example": "SENT"
          },
          "created_datetime": {
            "description": "Date and time the OTP token was created",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          },
          "updated_datetime": {
            "description": "Date and time the OTP token was last updated, if any",
            "type": "string",
            "example": "2024-06-28T23:56:38.128604+00:00"
          }
        }
      },
      "EstimateSMS": {
        "required": [
          "available_balance",
          "charge",
          "encoding",
          "message_length",
          "pages"
        ],
        "type": "object",
        "properties": {
          "available_balance": {
            "description": "Available balance for the request",
            "type": "number",
            "example": 1000.50
          },
          "charge": {
            "description": "Charge for the request",
            "type": "number",
            "example": 3.00
          },
          "encoding": {
            "description": "Encoding of the message",
            "type": "string",
            "enum": [
              "GSM",
              "UCS-2"
            ],
            "example": "UTF-8"
          },
          "message_length": {
            "description": "Length of the message",
            "type": "number",
            "example": 160
          },
          "pages": {
            "description": "Number of pages for the message",
            "type": "number",
            "example": 1
          }
        }
      },
      "EstimateEmail": {
        "required": [
          "available_balance",
          "charge"
        ],
        "type": "object",
        "properties": {
          "available_balance": {
            "description": "Available balance for the request",
            "type": "number",
            "example": 1000.50
          },
          "charge": {
            "description": "Charge for the request",
            "type": "number",
            "example": 0.33
          }
        }
      },
      "MetaSMS": {
        "required": [
          "method",
          "resource"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The HTTP method used to make the request",
            "type": "string",
            "example": "POST"
          },
          "resource": {
            "description": "The resource requested",
            "type": "string",
            "example": "/send/sms"
          },
          "estimate": {
            "$ref": "#/components/schemas/EstimateSMS"
          }
        }
      },
      "MetaEmail": {
        "required": [
          "method",
          "resource"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The HTTP method used to make the request",
            "type": "string",
            "example": "POST"
          },
          "resource": {
            "description": "The resource requested",
            "type": "string",
            "example": "/email/send"
          },
          "estimate": {
            "$ref": "#/components/schemas/EstimateEmail"
          }
        }
      },
      "ChargeAirtime": {
        "required": [
          "amount",
          "available_balance",
          "balance_before",
          "refunded"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount of the airtime to be recharged",
            "type": "number",
            "example": 1500
          },
          "available_balance": {
            "description": "Available balance of the recipient",
            "type": "number",
            "example": 2000
          },
          "balance_before": {
            "description": "Balance before recharge",
            "type": "number",
            "example": 500
          },
          "refunded": {
            "description": "Airtime refund",
            "type": "boolean",
            "example": false
          }
        }
      },
      "MetaAirtime": {
        "required": [
          "method",
          "resource"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The HTTP method used to make the request",
            "type": "string",
            "example": "POST"
          },
          "resource": {
            "description": "The resource requested",
            "type": "string",
            "example": "/airtime/buy"
          },
          "charge": {
            "$ref": "#/components/schemas/ChargeAirtime"
          }
        }
      },
      "Pagination": {
        "required": [
          "next_page",
          "per_page",
          "count_total",
          "page_total",
          "page",
          "prev_page",
          "query_id"
        ],
        "type": "object",
        "properties": {
          "next_page": {
            "description": "Indicates if there is a subsequent page",
            "type": "boolean",
            "example": "True"
          },
          "per_page": {
            "description": " Specifies the number of items displayed per page in the current query",
            "type": "number",
            "example": 7
          },
          "count_total": {
            "description": "The total count of all items available across all pages for the current query",
            "type": "number",
            "example": 50
          },
          "page_total": {
            "description": "The total number of pages available based on the per_page setting and the total item count",
            "type": "number",
            "example": 100
          },
          "page": {
            "description": "The current page number for the query or response",
            "type": "number",
            "example": 9
          },
          "prev_page": {
            "description": "Indicates if there is a previous page available; true if a prior page exists",
            "type": "boolean",
            "example": "True"
          },
          "query_id": {
            "description": "A unique identifier for the current query, which may correspond to the last row ID",
            "type": "string",
            "example": "1234"
          }
        }
      },
      "MetaQueryRows": {
        "required": [
          "method",
          "resource"
        ],
        "type": "object",
        "properties": {
          "method": {
            "description": "The HTTP method used to make the request",
            "type": "string",
            "example": "POST"
          },
          "resource": {
            "description": "The resource requested",
            "type": "string",
            "example": "/lists/contact/rows/query"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "Personalisation": {
        "required": [
          "to",
          "substitutions"
        ],
        "type": "object",
        "properties": {
          "to": {
            "description": "Recipient of the personalisation",
            "type": "string",
            "example": "2348023456789"
          },
          "substitutions": {
            "description": "Substitutions of the personalisation",
            "type": "object",
            "example": {
              "name": "John Doe"
            }
          }
        }
      },
      "PersonalisationEmail": {
        "required": [
          "to",
          "substitutions"
        ],
        "type": "object",
        "properties": {
          "to": {
            "description": "Recipient of the personalisation",
            "type": "string",
            "example": "mack@acme.com"
          },
          "substitutions": {
            "description": "Substitutions of the personalisation",
            "type": "object",
            "example": {
              "name": "Mack from Acme"
            }
          }
        }
      },
      "SendSMSRequest": {
        "type": "object",
        "properties": {
          "recipients": {
            "description": "Recipients of the SMS message, comma separated list of phone numbers",
            "type": "string",
            "example": "2348023456789, 2348098765432"
          },
          "sender_id": {
            "description": "Sender ID of the SMS message",
            "type": "string",
            "example": "Simpu",
            "maxLength": 11
          },
          "content": {
            "description": "Content of the SMS message, this is required if a template ID is not specified",
            "type": "string",
            "example": "Hello! World. This is a test message."
          },
          "template_id": {
            "description": "Template ID of the SMS message, this is required if content is not specified",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "personalisation": {
            "description": "Personalisation of the SMS message, this is applicable if a template ID is specified",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Personalisation"
            }
          },
          "external_ref": {
            "description": "This is a reference to the message in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "is_trackable": {
            "description": "This determines if links in the message should be tracked, links in the message will be replaced with trackable links",
            "type": "boolean",
            "default": false,
            "example": false
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the message `test` ",
            "type": "string",
            "example": "https://example.com/sms/delivery_report"
          }
        },
        "required": [
          "recipients",
          "sender_id"
        ]
      },
      "EmailSendRequest": {
        "required": [
          "recipients",
          "sender_id"
        ],
        "type": "object",
        "properties": {
          "recipients": {
            "description": "Recipients of the Email, comma-separated list of emails",
            "type": "string",
            "example": "john@acme.com,mack@acme.com",
            "minLength": 4
          },
          "sender_id": {
            "description": "Sender ID of the Email",
            "type": "string",
            "example": "jane@acme.com"
          },
          "content": {
            "description": "Content of the Email , this is required if a template ID is not specified",
            "type": "string",
            "example": "Hello, this is just a test."
          },
          "from_name": {
            "description": "The name of the sender of the Email",
            "type": "string",
            "example": "John from Acme"
          },
          "subject": {
            "description": "Subject of the Email",
            "type": "string",
            "example": "This is a test!!!"
          },
          "reply_to": {
            "description": "The Email address a response should be sent to",
            "type": "string",
            "example": "no-reply@acme.com"
          },
          "external_ref": {
            "description": "This is a reference to the message in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the email",
            "type": "string",
            "example": "https://example.com/email/delivery_report"
          },
          "template_id": {
            "description": "Template ID of the Email, this is required if content is not specified",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          },
          "personalisation": {
            "description": "Personalisation of the Email ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalisationEmail"
            }
          }
        }
      },
      "LookupPhoneRequest": {
        "required": [
          "phone"
        ],
        "type": "object",
        "properties": {
          "phone": {
            "description": "The phone number to be looked up",
            "type": "string",
            "example": "2348089672786"
          }
        }
      },
      "OTPTokenRequest": {
        "type": "object",
        "properties": {
          "recipient": {
            "description": "Recipient of the OTP token",
            "type": "string",
            "example": "2348023456789"
          },
          "length": {
            "description": "Length of the OTP token",
            "type": "number",
            "example": 6,
            "default": 4,
            "minimum": 4,
            "maximum": 8
          },
          "expires_in": {
            "description": "Time in minutes before the OTP token expires",
            "type": "number",
            "example": 30,
            "default": 15,
            "minimum": 1,
            "maximum": 60
          },
          "token": {
            "description": "The OTP token to send to the recipient, if not specified, a new token will be generated",
            "type": "string",
            "example": "123456"
          }
        },
        "required": [
          "recipient"
        ]
      },
      "BuyAirtimeRequest": {
        "type": "object",
        "required": [
          "network",
          "amount",
          "recipient"
        ],
        "properties": {
          "network": {
            "description": "The network carrier of the airtime",
            "type": "string",
            "enum": [
              "Airtel",
              "MTN",
              "Glo",
              "9mobile",
              "NTEL"
            ],
            "example": "Airtel"
          },
          "amount": {
            "description": " The airtime amount to be recharged",
            "type": "number",
            "example": 1500
          },
          "recipient": {
            "description": "The recipient of the airtime",
            "type": "string",
            "example": "2348023456789"
          },
          "callback": {
            "description": "This is the URL to receive delivery reports for the message",
            "type": "string",
            "example": "https://example.com/airtime/delivery_report"
          },
          "external_ref": {
            "description": "This is a reference to the message in your system",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          }
        }
      },
      "RowsQueryRequest": {
        "type": "object",
        "properties": {
          "smartlist_id": {
            "description": "ID of the SmartList to apply custom filters",
            "type": "string",
            "example": "1234"
          },
          "filters": {
            "description": "List of filter criteria to apply to the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RowsFilter"
            }
          }
        }
      },
      "CreateRowRequest": {
        "type": "object",
        "properties": {
          "columns": {
            "description": "Data values for each column in the row",
            "type": "object",
            "example": {
              "name": "name",
              "email": "email address",
              "type": "Text"
            }
          }
        }
      },
      "OTPVerifyRequest": {
        "type": "object",
        "properties": {
          "token": {
            "description": "The OTP token to verify",
            "type": "string",
            "example": "123456"
          },
          "id": {
            "description": "The ID of the OTP token to verify",
            "type": "string",
            "example": "674535b2b39158b9aae90188fcec23eb"
          }
        },
        "required": [
          "token",
          "id"
        ]
      },
      "Error": {
        "required": [
          "status",
          "message"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32",
            "example": 200
          },
          "message": {
            "type": "string",
            "example": "Invalid request"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "example": "name"
                },
                "message": {
                  "type": "string",
                  "example": "Error in field: 'name' Field required."
                },
                "type": {
                  "type": "string",
                  "example": "missing"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "An API key to authenticate requests"
      }
    }
  }
}